// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/UserService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Shares.Core.Services {
  public static partial class UserService
  {
    static readonly string __ServiceName = "Shares.Core.Services.UserService";

    static readonly grpc::Marshaller<global::Shares.Core.Services.GetUserRequest> __Marshaller_Shares_Core_Services_GetUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Shares.Core.Services.GetUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Shares.Core.Services.GetUserResponse> __Marshaller_Shares_Core_Services_GetUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Shares.Core.Services.GetUserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Shares.Core.Services.GetUsersRequest> __Marshaller_Shares_Core_Services_GetUsersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Shares.Core.Services.GetUsersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Shares.Core.Services.GetUsersResponse> __Marshaller_Shares_Core_Services_GetUsersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Shares.Core.Services.GetUsersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Shares.Core.Services.CreateUserRequest> __Marshaller_Shares_Core_Services_CreateUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Shares.Core.Services.CreateUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Shares.Core.Services.CreateUserResponse> __Marshaller_Shares_Core_Services_CreateUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Shares.Core.Services.CreateUserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Shares.Core.Services.UpdateUserRequest> __Marshaller_Shares_Core_Services_UpdateUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Shares.Core.Services.UpdateUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Shares.Core.Services.UpdateUserResponse> __Marshaller_Shares_Core_Services_UpdateUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Shares.Core.Services.UpdateUserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Shares.Core.Services.ChangePasswordRequest> __Marshaller_Shares_Core_Services_ChangePasswordRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Shares.Core.Services.ChangePasswordRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Shares.Core.Services.ChangePasswordResponse> __Marshaller_Shares_Core_Services_ChangePasswordResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Shares.Core.Services.ChangePasswordResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Shares.Core.Services.GetUserRequest, global::Shares.Core.Services.GetUserResponse> __Method_Get = new grpc::Method<global::Shares.Core.Services.GetUserRequest, global::Shares.Core.Services.GetUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_Shares_Core_Services_GetUserRequest,
        __Marshaller_Shares_Core_Services_GetUserResponse);

    static readonly grpc::Method<global::Shares.Core.Services.GetUsersRequest, global::Shares.Core.Services.GetUsersResponse> __Method_List = new grpc::Method<global::Shares.Core.Services.GetUsersRequest, global::Shares.Core.Services.GetUsersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_Shares_Core_Services_GetUsersRequest,
        __Marshaller_Shares_Core_Services_GetUsersResponse);

    static readonly grpc::Method<global::Shares.Core.Services.CreateUserRequest, global::Shares.Core.Services.CreateUserResponse> __Method_Create = new grpc::Method<global::Shares.Core.Services.CreateUserRequest, global::Shares.Core.Services.CreateUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_Shares_Core_Services_CreateUserRequest,
        __Marshaller_Shares_Core_Services_CreateUserResponse);

    static readonly grpc::Method<global::Shares.Core.Services.UpdateUserRequest, global::Shares.Core.Services.UpdateUserResponse> __Method_Update = new grpc::Method<global::Shares.Core.Services.UpdateUserRequest, global::Shares.Core.Services.UpdateUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_Shares_Core_Services_UpdateUserRequest,
        __Marshaller_Shares_Core_Services_UpdateUserResponse);

    static readonly grpc::Method<global::Shares.Core.Services.ChangePasswordRequest, global::Shares.Core.Services.ChangePasswordResponse> __Method_ChangePassword = new grpc::Method<global::Shares.Core.Services.ChangePasswordRequest, global::Shares.Core.Services.ChangePasswordResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangePassword",
        __Marshaller_Shares_Core_Services_ChangePasswordRequest,
        __Marshaller_Shares_Core_Services_ChangePasswordResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Shares.Core.Services.UserServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UserService</summary>
    [grpc::BindServiceMethod(typeof(UserService), "BindService")]
    public abstract partial class UserServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Shares.Core.Services.GetUserResponse> Get(global::Shares.Core.Services.GetUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Shares.Core.Services.GetUsersResponse> List(global::Shares.Core.Services.GetUsersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Shares.Core.Services.CreateUserResponse> Create(global::Shares.Core.Services.CreateUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Shares.Core.Services.UpdateUserResponse> Update(global::Shares.Core.Services.UpdateUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Shares.Core.Services.ChangePasswordResponse> ChangePassword(global::Shares.Core.Services.ChangePasswordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserService</summary>
    public partial class UserServiceClient : grpc::ClientBase<UserServiceClient>
    {
      /// <summary>Creates a new client for UserService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Shares.Core.Services.GetUserResponse Get(global::Shares.Core.Services.GetUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Shares.Core.Services.GetUserResponse Get(global::Shares.Core.Services.GetUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Shares.Core.Services.GetUserResponse> GetAsync(global::Shares.Core.Services.GetUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Shares.Core.Services.GetUserResponse> GetAsync(global::Shares.Core.Services.GetUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      public virtual global::Shares.Core.Services.GetUsersResponse List(global::Shares.Core.Services.GetUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Shares.Core.Services.GetUsersResponse List(global::Shares.Core.Services.GetUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Shares.Core.Services.GetUsersResponse> ListAsync(global::Shares.Core.Services.GetUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Shares.Core.Services.GetUsersResponse> ListAsync(global::Shares.Core.Services.GetUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      public virtual global::Shares.Core.Services.CreateUserResponse Create(global::Shares.Core.Services.CreateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Shares.Core.Services.CreateUserResponse Create(global::Shares.Core.Services.CreateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Shares.Core.Services.CreateUserResponse> CreateAsync(global::Shares.Core.Services.CreateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Shares.Core.Services.CreateUserResponse> CreateAsync(global::Shares.Core.Services.CreateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::Shares.Core.Services.UpdateUserResponse Update(global::Shares.Core.Services.UpdateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Shares.Core.Services.UpdateUserResponse Update(global::Shares.Core.Services.UpdateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Shares.Core.Services.UpdateUserResponse> UpdateAsync(global::Shares.Core.Services.UpdateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Shares.Core.Services.UpdateUserResponse> UpdateAsync(global::Shares.Core.Services.UpdateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::Shares.Core.Services.ChangePasswordResponse ChangePassword(global::Shares.Core.Services.ChangePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangePassword(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Shares.Core.Services.ChangePasswordResponse ChangePassword(global::Shares.Core.Services.ChangePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangePassword, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Shares.Core.Services.ChangePasswordResponse> ChangePasswordAsync(global::Shares.Core.Services.ChangePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangePasswordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Shares.Core.Services.ChangePasswordResponse> ChangePasswordAsync(global::Shares.Core.Services.ChangePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangePassword, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_ChangePassword, serviceImpl.ChangePassword).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UserServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Shares.Core.Services.GetUserRequest, global::Shares.Core.Services.GetUserResponse>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Shares.Core.Services.GetUsersRequest, global::Shares.Core.Services.GetUsersResponse>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Create, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Shares.Core.Services.CreateUserRequest, global::Shares.Core.Services.CreateUserResponse>(serviceImpl.Create));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Shares.Core.Services.UpdateUserRequest, global::Shares.Core.Services.UpdateUserResponse>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_ChangePassword, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Shares.Core.Services.ChangePasswordRequest, global::Shares.Core.Services.ChangePasswordResponse>(serviceImpl.ChangePassword));
    }

  }
}
#endregion
